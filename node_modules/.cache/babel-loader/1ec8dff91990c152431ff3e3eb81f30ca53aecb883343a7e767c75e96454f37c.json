{"ast":null,"code":"(function () {\n  'use strict';\n\n  const MI_SERVICE_UUID = '0000fee0-0000-1000-8000-00805f9b34fb';\n  const MI_DEVICE_NAME_CHAR = '00002a00-0000-1000-8000-00805f9b34fb';\n  const MI_REALTIME_STEPS_CHAR = '0000ff06-0000-1000-8000-00805f9b34fb';\n  const MI_BATTERY_CHAR = '0000ff0c-0000-1000-8000-00805f9b34fb';\n  class MIband {\n    constructor() {\n      this.device = null;\n      this.server = null;\n      this._characteristics = new Map();\n    }\n    connect() {\n      return navigator.bluetooth.requestDevice({\n        filters: [{\n          services: [MI_SERVICE_UUID]\n        }],\n        optionalServices: [0x1800, 0x180D]\n      }).then(device => {\n        this.device = device;\n        return device.gatt.connect();\n      }).then(server => {\n        this.server = server;\n        return Promise.all([server.getPrimaryService(MI_SERVICE_UUID).then(service => {\n          return Promise.all([this.cacheCharacteristic(service, MI_REALTIME_STEPS_CHAR)]);\n        })]);\n      });\n    }\n    disconnect() {\n      if (!this.device || !this.device.gatt) {\n        return Promise.resolve();\n      }\n      return this.device.gatt.disconnect();\n    }\n    getDeviceName() {\n      return this.device.gatt.getPrimaryService(0x1800).then(service => service.getCharacteristic(MI_DEVICE_NAME_CHAR)).then(characteristic => characteristic.readValue()).then(data => {\n        let decoder = new TextDecoder('utf-8');\n        return decoder.decode(data);\n      });\n    }\n    getInitialSteps() {\n      return this.device.gatt.getPrimaryService(MI_SERVICE_UUID).then(service => service.getCharacteristic(MI_REALTIME_STEPS_CHAR)).then(characteristic => characteristic.readValue()).then(data => data.getUint8(0));\n    }\n    getSteps(value) {\n      value = value.buffer ? value : new DataView(value);\n      let steps = value.getUint8(0);\n      return steps;\n    }\n    startNotificationsSteps() {\n      return this.startNotifications(MI_REALTIME_STEPS_CHAR);\n    }\n    startNotifications(characteristicUuid) {\n      let characteristic = this._characteristics.get(characteristicUuid);\n      // Returns characteristic to set up characteristicvaluechanged event\n      return characteristic.startNotifications().then(() => characteristic);\n    }\n    cacheCharacteristic(service, characteristicUuid) {\n      return service.getCharacteristic(characteristicUuid).then(characteristic => {\n        this._characteristics.set(characteristicUuid, characteristic);\n      });\n    }\n  }\n  window.MIband = new MIband();\n})();","map":{"version":3,"names":["MI_SERVICE_UUID","MI_DEVICE_NAME_CHAR","MI_REALTIME_STEPS_CHAR","MI_BATTERY_CHAR","MIband","constructor","device","server","_characteristics","Map","connect","navigator","bluetooth","requestDevice","filters","services","optionalServices","then","gatt","Promise","all","getPrimaryService","service","cacheCharacteristic","disconnect","resolve","getDeviceName","getCharacteristic","characteristic","readValue","data","decoder","TextDecoder","decode","getInitialSteps","getUint8","getSteps","value","buffer","DataView","steps","startNotificationsSteps","startNotifications","characteristicUuid","get","set","window"],"sources":["/home/quanglam/Desktop/Gym-exercises-web-app-with-react-js-main/src/utils/miBandConnection.js"],"sourcesContent":["(function() {\n    'use strict';\n  \n    const MI_SERVICE_UUID = '0000fee0-0000-1000-8000-00805f9b34fb';\n    const MI_DEVICE_NAME_CHAR = '00002a00-0000-1000-8000-00805f9b34fb';\n    const MI_REALTIME_STEPS_CHAR = '0000ff06-0000-1000-8000-00805f9b34fb';\n    const MI_BATTERY_CHAR = '0000ff0c-0000-1000-8000-00805f9b34fb';\n  \n    class MIband {\n      constructor() {\n        this.device = null;\n        this.server = null;\n        this._characteristics = new Map();\n      }\n  \n      connect() {\n        return navigator.bluetooth.requestDevice({\n          filters: [{ services: [MI_SERVICE_UUID] }],\n          optionalServices: [0x1800, 0x180D]\n        })\n        .then(device => { \n          this.device = device;\n          return device.gatt.connect();\n        })\n        .then(server => {\n          this.server = server;\n          return Promise.all([\n            server.getPrimaryService(MI_SERVICE_UUID).then(service => {\n              return Promise.all([\n                this.cacheCharacteristic(service, MI_REALTIME_STEPS_CHAR),\n              ])\n            })\n          ]);\n        })\n      }\n  \n      disconnect() {\n        if (!this.device || !this.device.gatt) {\n          return Promise.resolve();\n        }\n        return this.device.gatt.disconnect();\n      }\n  \n      getDeviceName() {\n        return this.device.gatt.getPrimaryService(0x1800)\n        .then(service => service.getCharacteristic(MI_DEVICE_NAME_CHAR))\n        .then(characteristic => characteristic.readValue())\n        .then(data => {\n          let decoder = new TextDecoder('utf-8');\n          return decoder.decode(data);\n        });\n      }\n  \n      getInitialSteps() {\n         return this.device.gatt.getPrimaryService(MI_SERVICE_UUID)\n        .then(service => service.getCharacteristic(MI_REALTIME_STEPS_CHAR))\n        .then(characteristic => characteristic.readValue())\n        .then(data => data.getUint8(0));\n      }\n  \n      getSteps(value) {\n        value = value.buffer ? value : new DataView(value);\n        let steps = value.getUint8(0);\n        return steps;\n      }\n  \n      startNotificationsSteps() {\n        return this.startNotifications(MI_REALTIME_STEPS_CHAR);\n      }\n  \n      startNotifications(characteristicUuid) {\n        let characteristic = this._characteristics.get(characteristicUuid);\n        // Returns characteristic to set up characteristicvaluechanged event\n        return characteristic.startNotifications()\n        .then(() => characteristic);\n      }\n  \n      cacheCharacteristic(service, characteristicUuid) {\n        return service.getCharacteristic(characteristicUuid)\n          .then(characteristic => {\n            this._characteristics.set(characteristicUuid, characteristic);\n        });\n      }\n  \n    }\n  \n    window.MIband = new MIband();\n  \n  })();\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}